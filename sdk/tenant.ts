// Copyright 2023 Tetrate
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Tenant extends pulumi.CustomResource {
    /**
     * Get an existing Tenant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TenantState, opts?: pulumi.CustomResourceOptions): Tenant {
        return new Tenant(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tsb:index/tenant:Tenant';

    /**
     * Returns true if the given object is an instance of Tenant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Tenant {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Tenant.__pulumiType;
    }

    /**
     * A description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * User friendly name for the resource.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * The short name for the resource to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The parent ID of the Tenant.
     */
    public readonly parent!: pulumi.Output<string>;
    /**
     * Security domains can be used to group different resources under the same security domain. Although security domain is
     * not resource itself currently, it follows a fqn format `organizations/myorg/securitydomains/mysecuritydomain`, and a
     * child cannot override any ancestor's security domain. Once a security domain is assigned to a _Tenant_, all the children
     * resources will belong to that security domain in the same way a _Workspace_ belongs to a _Tenant_, a _Workspace_ will
     * also belong to the security domain assigned to the _Tenant_. Security domains can also be used to define _Security
     * settings Authorization rules_ in which you can allow or deny request from or to a security domain.
     */
    public readonly securityDomain!: pulumi.Output<string | undefined>;

    /**
     * Create a Tenant resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TenantArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TenantArgs | TenantState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TenantState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["securityDomain"] = state ? state.securityDomain : undefined;
        } else {
            const args = argsOrState as TenantArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["securityDomain"] = args ? args.securityDomain : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Tenant.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Tenant resources.
 */
export interface TenantState {
    /**
     * A description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * User friendly name for the resource.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The short name for the resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The parent ID of the Tenant.
     */
    parent?: pulumi.Input<string>;
    /**
     * Security domains can be used to group different resources under the same security domain. Although security domain is
     * not resource itself currently, it follows a fqn format `organizations/myorg/securitydomains/mysecuritydomain`, and a
     * child cannot override any ancestor's security domain. Once a security domain is assigned to a _Tenant_, all the children
     * resources will belong to that security domain in the same way a _Workspace_ belongs to a _Tenant_, a _Workspace_ will
     * also belong to the security domain assigned to the _Tenant_. Security domains can also be used to define _Security
     * settings Authorization rules_ in which you can allow or deny request from or to a security domain.
     */
    securityDomain?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Tenant resource.
 */
export interface TenantArgs {
    /**
     * A description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * User friendly name for the resource.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The short name for the resource to be created.
     */
    name: pulumi.Input<string>;
    /**
     * The parent ID of the Tenant.
     */
    parent: pulumi.Input<string>;
    /**
     * Security domains can be used to group different resources under the same security domain. Although security domain is
     * not resource itself currently, it follows a fqn format `organizations/myorg/securitydomains/mysecuritydomain`, and a
     * child cannot override any ancestor's security domain. Once a security domain is assigned to a _Tenant_, all the children
     * resources will belong to that security domain in the same way a _Workspace_ belongs to a _Tenant_, a _Workspace_ will
     * also belong to the security domain assigned to the _Tenant_. Security domains can also be used to define _Security
     * settings Authorization rules_ in which you can allow or deny request from or to a security domain.
     */
    securityDomain?: pulumi.Input<string>;
}
